package net.sf.jclec.exprtree.fun;

import java.util.Stack;
import java.util.Iterator;

import net.sf.jclec.exprtree.ExprTree;
import net.sf.jclec.exprtree.IContext;
import net.sf.jclec.exprtree.IPrimitive;
import net.sf.jclec.util.random.IRandGen;

/**
 * Expression tree function.
 * 
 * @author Sebastian Ventura
 */

public class ExprTreeFunction implements IContext 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 266592167202045647L;

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Propierties
	/////////////////////////////////////////////////////////////////
	
	/** Function code */
	
	protected ExprTree code;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Execution stack */
	
	protected Stack<Object> stack = new Stack<Object> ();
	
	/** Current arguments */
	
	protected Object [] args;
	
	/** Random generator used in some primitives */
	
	protected IRandGen randgen;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
		
	/**
	 * Empty (default) constructor
	 */
	
	public ExprTreeFunction() 
	{
		super();
	}
	
	/**
	 * Constructor that sets function code
	 */
	
	public ExprTreeFunction(ExprTree code) 
	{
		super();
		setCode(code);
	}
	
	/**
	 * Constructor that sets function code and random generator
	 */
	
	public ExprTreeFunction(ExprTree code, IRandGen randgen) {
		super();
		setCode(code);
		setRandomGenerator(randgen);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Getters and setters

	/**
	 * Access to function code
	 * 
	 * @return Current code
	 */
	
	public ExprTree getCode() 
	{
		return code;
	}

	/**
	 * Sets function code
	 * 
	 * @param code Function code
	 */
	
	public void setCode(ExprTree code) 
	{
		this.code = code;
	}

	/**
	 * Gets the random generator
	 * 
	 * @return  The random generator
	 */
	
	public IRandGen getRandomGenerator() 
	{
		return randgen;
	}
	
	/**
	 * Sets the random generator
	 * 
	 * @param randgen The random generator
	 */
	
	public void setRandomGenerator(IRandGen randgen) 
	{
		this.randgen = randgen;
	}
	
	// Execution method
	
	@SuppressWarnings("unchecked")
	public <E> E execute(Object... arguments)
	{
		// Set current arguments
		this.args = arguments;
		// Execute code sequence
		Iterator<IPrimitive> it = code.executeIterator();
		while (it.hasNext()) {
			it.next().evaluate(this);
		}		
		// Return the peek of the execution stack
		return (E) stack.pop();
	}
	
	// Arguments manipulation
}
