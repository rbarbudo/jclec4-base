package net.sf.jclec.ge;

import net.sf.jclec.IProvider;
import net.sf.jclec.ISpecies;
import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.base.AbstractRecombinator;

/**
 * GEIndividual (and subclasses) specific recombinator.
 * 
 * @author Rafael Barbudo Lunar
 */

public abstract class GERecombinator extends AbstractRecombinator 
{	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by eclipse */
	
	private static final long serialVersionUID = -8084778715799537362L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Attributes
	/////////////////////////////////////////////////////////////////
	
	/** Individual species */
	
	protected GESpecies species;
	
	/** Individual provider */	
	
	protected GECreator provider;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public GERecombinator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////	
	
	/**
	 * Sets ppl = 2
	 * 
	 * {@inheritDoc}
	 */
	
	@Override
	protected void setPpl() 
	{
		this.ppl = 2;
	}

	/**
	 * Sets spl = 2
	 * 
	 * {@inheritDoc}
	 */

	@Override
	protected void setSpl() 
	{
		this.spl = 2;
	}
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void prepareRecombination()
	{
		// Sets individual species
		ISpecies spc = context.getSpecies();
		if (spc instanceof GESpecies) {
			this.species = (GESpecies) spc;
		}
		else
			throw new IllegalStateException("Invalid population species");
		
		// Sets individual provider
		IProvider provider = ((IProvider)((PopulationAlgorithm) context).getProvider());
		if(provider instanceof GECreator)
			((GESpecies)spc).setProvider((GECreator)provider);
	}
}