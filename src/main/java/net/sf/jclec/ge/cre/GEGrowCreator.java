package net.sf.jclec.ge.cre;

import net.sf.jclec.ge.GECreator;
import net.sf.jclec.ge.GEIndividual;

/**
 * GEIndividual creator which maps the phenotype with the grow method.
 * 
 * @author Rafael Barbudo Lunar
 */

public class GEGrowCreator extends GECreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -5538353209724236271L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public GEGrowCreator()
	{
		super();
	}
	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	protected void createNext() 
	{
		String rootSymbol = schema.getRootSymbol();
		int [] newGenotype = createGenotype();
		GEIndividual newInd;
		
		
		if(schema.getIndividualConstants().length > 0)
		{
			double [] constants = createConstants();
			newInd = new GEIndividual(newGenotype, constants);
		}
		else
			newInd = new GEIndividual(newGenotype);
		
		
		schema.grow(newInd, rootSymbol, 0, 0);
		// Add the new individual
		createdBuffer.add(newInd);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	public GEIndividual createIndividual(int [] genotype)
	{
		GEIndividual newInd = new GEIndividual(genotype);		
		String rootSymbol = schema.getRootSymbol();
		
		schema.grow(newInd, rootSymbol, 0, 0);
		
		return newInd;	
	}
	
}
