package net.sf.jclec.ge.rec;

import net.sf.jclec.ge.GEIndividual;
import net.sf.jclec.ge.GERecombinator;
import net.sf.jclec.symreg.Cte;
import net.sf.jclec.syntaxtree.SyntaxTree;
import net.sf.jclec.syntaxtree.TerminalNode;

/**
 * The typical One Point Crossover operator applied to GE
 * 
 * @author Rafael Barbudo Lunar
 */

public class RippleCrossoverCte extends GERecombinator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by eclipse */
	
	private static final long serialVersionUID = -7708378524323292937L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */

	public RippleCrossoverCte() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// java.lang.Object methods

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public boolean equals(Object other)
	{
		if (other instanceof RippleCrossoverCte) {
			return true;
		}
		else {
			return false;
		}
	}	

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractRecombinator methods

	/**
	 * {@inheritDoc}
	 */

	@Override	
	protected void recombineNext() 
	{
		// Genotype length
		int gl = species.getGenotypeLength();
		
		// Parents genotypes
		int [] p0_genome = 
			( (GEIndividual) parentsBuffer.get(parentsCounter)).getGenotype();
		int [] p1_genome = 
			( (GEIndividual) parentsBuffer.get(parentsCounter+1)).getGenotype();
		
		// Parents phenotypes
		SyntaxTree p0_phenome = ( (GEIndividual) parentsBuffer.get(parentsCounter)).getPhenotype();
		SyntaxTree p1_phenome = ( (GEIndividual) parentsBuffer.get(parentsCounter+1)).getPhenotype();
		
		// Create array with constant values
		double [] constants = new double [p0_phenome.nOfNodes("cte") + p1_phenome.nOfNodes("cte")];
		int cteIdx = 0;
		
		for(int i=0; i<p0_phenome.size(); i++) {
			String symbol = p0_phenome.getNode(i).getSymbol();
			if(symbol.equals("cte")) {
				constants[cteIdx] = ((Cte) ((TerminalNode)p0_phenome.getNode(i)).getCode()).getValue();
				cteIdx++;
			}
		}
			
		for(int i=0; i<p1_phenome.size(); i++) {
			String symbol = p1_phenome.getNode(i).getSymbol();
			if(symbol.equals("cte")) {
				constants[cteIdx] = ((Cte) ((TerminalNode)p1_phenome.getNode(i)).getCode()).getValue();
				cteIdx++;
			}
		}
		
		// Creating sons genotypes
		int [] s0_genome = new int[gl];
		int [] s1_genome = new int[gl];
		
		// Sets a crossover point
		int cp = randgen.choose(1, gl-1);
		
		// First son' genotype
		System.arraycopy(p0_genome,  0, s0_genome,  0, cp);
		System.arraycopy(p1_genome, cp, s0_genome, cp, gl-cp);
		
		// Second son' genotype
		System.arraycopy(p1_genome,  0, s1_genome,  0, cp);
		System.arraycopy(p0_genome, cp, s1_genome, cp, gl-cp);
		
		// Put sons in s
		GEIndividual s0 = species.createAndMapIndividual(s0_genome);
		GEIndividual s1 = species.createAndMapIndividual(s1_genome);
		
		
		// Set the constants to the first son	
		cteIdx = 0;
		int phenomeIdx = 0;
		
		while(cteIdx < constants.length && phenomeIdx < s0.getPhenotype().size()) {
			//System.out.println(s0.getPhenotype().getNode(0).getSymbol());
			String symbol = s0.getPhenotype().getNode(phenomeIdx).getSymbol();
			if(symbol.equals("cte")) {
				((Cte)((TerminalNode) s0.getPhenotype().getNode(phenomeIdx)).getCode()).setValue(constants[cteIdx]);
				cteIdx++;
			}
			phenomeIdx++;
		}
		
		// Set the constants to the second son
		cteIdx = 0;
		phenomeIdx = 0;
		while(cteIdx < constants.length && phenomeIdx < s1.getPhenotype().size()) {
			String symbol = s1.getPhenotype().getNode(phenomeIdx).getSymbol();
			if(symbol.equals("cte")) {
				((Cte)((TerminalNode) s1.getPhenotype().getNode(phenomeIdx)).getCode()).setValue(constants[cteIdx]);
				cteIdx++;
			}
			phenomeIdx++;
		}
		
		sonsBuffer.add(s0);
		sonsBuffer.add(s1);
	}
}