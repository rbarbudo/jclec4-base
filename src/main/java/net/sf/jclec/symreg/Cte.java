package net.sf.jclec.symreg;

import org.apache.commons.configuration.Configuration;

import net.sf.jclec.IConfigure;
import net.sf.jclec.exprtree.IPrimitive;
import net.sf.jclec.exprtree.fun.AbstractPrimitive;
import net.sf.jclec.exprtree.fun.ExprTreeFunction;
import net.sf.jclec.util.random.IRandGen;
import net.sf.jclec.util.random.IRandGenFactory;
import net.sf.jclec.util.range.IRange;

/**
 * Represents a constant in a symbolic regression problem.
 * 
 * @author Rafael Barbudo Lunar
 */

public class Cte extends AbstractPrimitive implements ISimpleSchematized
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -4349262554064087860L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////

	/** Constant value */

	private Double value;

	/** Constant schema */

	protected IRange schema;

	/** Random generator **/

	protected IRandGen randgen;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */

	public Cte() 
	{
		super(new Class<?> [] {Double.class, Double.class}, Double.class);				
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	@Override
	protected void evaluate(ExprTreeFunction context) 
	{	
		double value = schema.getRandom(randgen);
		setValue(value);		
		push(context,getValue());	
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	public void setValue(double value) 
	{
		this.value = value;
	}

	public double getValue() 
	{
		return value;
	}

	@Override
	public IPrimitive copy() 
	{
		Cte cNew = new Cte();
		cNew.value = new Double(this.value);
		cNew.schema = this.schema;
		cNew.randgen = this.randgen;
		
		return cNew;
	}

	@Override
	public IPrimitive instance() 
	{
		Cte cNew = new Cte();
		cNew.schema = this.schema;
		cNew.randgen = this.randgen;
		cNew.value = schema.getRandom(randgen);

		return cNew;
	}

	@Override
	public String toString()
	{
		if(value!= null)
			return value.toString();
		else
			return "Cte";
	}

	@Override
	public IRange getSchema() 
	{
		return schema;
	}

	@Override
	public void setSchema(IRange schema) 
	{
		this.schema = schema;
	}

	@Override
	public void setRandomGenerator(IRandGen randgen) 
	{
		this.randgen = randgen;	
	}

	private IRange configureConstantSchema(Configuration settings) {
		// Constant schema
		IRange schema = null;
		try {
			// Get component classname
			String componentClassname = settings.getString("constant-schema[@type]");
			// Set schema component
			Class<?> componentClass = Class.forName(componentClassname);
			schema = (IRange) componentClass.newInstance();

			if (schema instanceof IConfigure)
				((IConfigure) schema).configure(settings.subset("constant-schema"));
		}
		catch(ClassNotFoundException e) {
			e.printStackTrace();
			System.exit(0);
		}
		catch(IllegalAccessException e) {
			e.printStackTrace();
			System.exit(0);
		}
		catch(InstantiationException e) {
			e.printStackTrace();
			System.exit(0);
		}			
		// Assign constants schema
		return schema;
	}
	
	@SuppressWarnings("unchecked")
	private IRandGen configureRandomGenerator(Configuration settings) 
	{
		try {
			// Species classname
			String randGenFactoryClassname = 
					settings.getString("rand-gen-factory[@type]");
			// Species class
			Class<? extends IRandGenFactory> randGenFactoryClass = 
				(Class<? extends IRandGenFactory>) Class.forName(randGenFactoryClassname);
			// Species instance
			IRandGenFactory randGenFactory = randGenFactoryClass.newInstance();
			// Configure species
			if (randGenFactory instanceof IConfigure) {
				((IConfigure) randGenFactory).configure
					(settings.subset("rand-gen-factory"));
			}
			// Return the random generator
			return randGenFactory.createRandGen();
		}
		catch(ClassNotFoundException e) {
			e.printStackTrace();
			System.exit(0);
		}
		catch(IllegalAccessException e) {
			e.printStackTrace();
			System.exit(0);
		}
		catch(InstantiationException e) {
			e.printStackTrace();
			System.exit(0);
		}
		// This point should never be reached
		return null;
			
	}
	
	@Override
	public void configure(Configuration settings) 
	{
		this.schema = configureConstantSchema(settings);
		this.randgen = configureRandomGenerator(settings);
	}


}