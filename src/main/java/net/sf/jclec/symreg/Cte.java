package net.sf.jclec.symreg;

import net.sf.jclec.ISystem;
import net.sf.jclec.exprtree.IPrimitive;
import net.sf.jclec.exprtree.fun.AbstractPrimitive;
import net.sf.jclec.exprtree.fun.ExprTreeFunction;
import net.sf.jclec.util.range.IRange;

/**
 * Represents a constant in a symbolic regression problem.
 * 
 * @author Rafael Barbudo Lunar
 */

public class Cte extends AbstractPrimitive
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -4349262554064087860L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Constant value */
	
	private Double value;
	
	/** Constant schema */
	
	protected IRange [] schema;
	
	/** Context */
	
	protected ISystem context;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public Cte() 
	{
		super(new Class<?> [] {Double.class, Double.class}, Double.class);				
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	protected void evaluate(ExprTreeFunction context) 
	{	
		System.out.println("hola");
		schema = context.getConstantRange();
		double value = schema[0].getRandom(context.getRandomGenerator());
		System.out.println("value:" + value);
		setValue(value);
		push(context,getValue());	
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	public void setValue(double value) 
	{
		this.value = value;
	}

	public double getValue() 
	{
		return value;
	}

	@Override
	public IPrimitive copy() 
	{
		Cte cNew = new Cte();
		cNew.value = new Double(this.value);
		cNew.context = this.context;
		cNew.schema = this.schema;
		
		return cNew;
	}

	@Override
	public IPrimitive instance() 
	{
		Cte cNew = new Cte();
		cNew.context = this.context;
		cNew.schema = this.schema;
		
		return cNew;
	}
	
	public String toString()
	{
		return value.toString();
	}	
}