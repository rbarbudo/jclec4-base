package net.sf.jclec.util.opt;

import java.util.ArrayList;
import java.util.List;

import net.sf.jclec.ISystem;
import net.sf.jclec.IEvaluator;
import net.sf.jclec.IIndividual;
import net.sf.jclec.IPopulation;

import net.sf.jclec.util.random.IRandGen;

/**
 * IOptimizer abstract implementation.
 * 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 *
 * @param <IIndividual> Type of individuals in system 
 */

public abstract class AbstractOptimizer implements IOptimizer 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -1888039429996699420L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Attributes
	/////////////////////////////////////////////////////////////////
	
	/** Execution context */
		
	protected IPopulation context;
		
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables 
	/////////////////////////////////////////////////////////////////
	
	/** Random number generator */
	
	protected transient IRandGen randgen;
	
	/** Evaluator */
	
	protected transient IEvaluator evaluator; 
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public AbstractOptimizer() 
	{
		super();
			
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// IOptimizer interface
	
	/**
	 * {@inheritDoc}
	 */
	
	public void contextualize(ISystem context)
	{
		// If execution context is valid
		if(context instanceof IPopulation) {
			// Set execution context
			this.context = (IPopulation) context;
			// Attach a random generator to this object
			this.randgen = context.createRandGen();
		}
		else {
			throw new IllegalArgumentException
				("This object uses a population as execution context");
		}
		// Set individuals evaluator
		evaluator = ((IPopulation) context).getEvaluator();		
	}   

	/**
	 * {@inheritDoc}
	 */
	
	public List<IIndividual> optimize(List<IIndividual> inds) 
	{
		// Resulting list
		List<IIndividual> optimized = new ArrayList<IIndividual>();
		// Optimize individual
		for (IIndividual ind : inds) {
			optimized.add(optimize(ind));
		}		
		// Return result list
		return optimized;    	
	}
	
	/**
	 * Individual optimization
	 */
	public abstract IIndividual optimize(IIndividual ind);
}
